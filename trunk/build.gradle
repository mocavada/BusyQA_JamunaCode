buildscript {
    ext {
        springBootVersion = '2.1.3.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:1.2.0")
        classpath("com.palantir.gradle.docker:gradle-docker:0.20.1")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.moowork.node'
apply plugin: 'com.palantir.docker'

repositories {
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    // WEB
    implementation('org.springframework.boot:spring-boot-starter-web')

    // JPA
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('mysql:mysql-connector-java')

    // THYMELEAF
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity4', version: '2.1.2.RELEASE'
    compile group: 'nz.net.ultraq.thymeleaf', name: 'thymeleaf-layout-dialect'


    // MUSTACHE
    implementation('org.springframework.boot:spring-boot-starter-mustache')

    // LOG
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation('org.springframework.boot:spring-boot-starter-actuator')

    // SECURITY
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.1.4.RELEASE'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2'
    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.3.0.RELEASE'

    // LDAP
//	compile group: 'org.springframework.security', name: 'spring-security-ldap'
//	compile group: 'com.unboundid', name: 'unboundid-ldapsdk'


    // AOP
    implementation('org.springframework.boot:spring-boot-starter-aop')

    // EMAIL
    compile group: 'org.springframework', name: 'spring-context-support', version: '3.2.0.RELEASE'
    compile group: 'javax.mail', name: 'mail', version: '1.4'

    // TEST
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation group: 'com.github.springtestdbunit', name: 'spring-test-dbunit', version: '1.3.0'
    testImplementation group: 'com.google.code.gson', name: 'gson', version: '2.8.4'
    testImplementation group: 'net.sourceforge.htmlunit', name: 'htmlunit', version: '2.30'




    // HOT SWAPPING
    // https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html
    // https://www.vojtechruzicka.com/spring-boot-devtools/
    developmentOnly("org.springframework.boot:spring-boot-devtools")
}

//** TASK FOR DATABASE SCHEMA

//task dbCreateSchema(type: JavaExec) {
//	group = 'database'
//	main = "com.mocavada.config.db.MainSchemaManagement"
//	classpath = sourceSets.main.runtimeClasspath
//	args 'create'
//}
//
//task dbDropSchema(type: JavaExec) {
//	group = 'database'
//	main = "com.mocavada.config.db.MainSchemaManagement"
//	classpath = sourceSets.main.runtimeClasspath
//	args 'drop'
//}
//
//task dbCreateAdmin(type: JavaExec) {
//	group = 'database'
//	main = "com.mocavada.config.db.MainSchemaManagement"
//	classpath = sourceSets.main.runtimeClasspath
//	args 'createAdmin'
//}


//** TASK FOR ANGULAR FRONTEND

node {
    version = "10.15.1"
    npmVersion = "6.8.0"
    download = true
    nodeModulesDir = file("frontend")
}

task buildFrontEnd(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = "Build and watches the client side assets for rebuilding"
    args = ['run', 'buildDevFast']

    //skip update. remove it if needed
    nodeSetup.onlyIf {
        !nodeSetup.nodeDir.exists()
    }
    npmSetup.onlyIf {
        !npmSetup.npmDir.exists()
    }
    npmInstall.onlyIf {
        !npmSetup.npmDir.exists()
    }
}



//** COMMENT THIS LINE TO RUN SPRING BOOT W/O ANGULAR FRONTEND

//bootRun.dependsOn(buildFrontEnd)

// SPEED BOOT FOR SPRING BOOT
bootRun {
    systemProperties['Xverify'] = 'none'
    systemProperties['TieredStopAtLevel'] = '1'
}

